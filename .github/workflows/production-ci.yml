name: Production CI/CD Pipeline

# P0-Critical: Automated testing and deployment pipeline
# Ensures code quality, security, and reliability before production deployment

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Environment Validation
  validate-environment:
    name: Validate Environment Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-dotenv
      
      - name: Run environment validator
        run: |
          python -m src.utils.environment_validator
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          ENVIRONMENT: staging

  # Job 2: Backend Tests
  backend-tests:
    name: Backend Tests (Python)
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY_TEST }}
          ENVIRONMENT: test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Job 3: Frontend Tests
  frontend-tests:
    name: Frontend Tests (Next.js)
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: agentguard-ui/package-lock.json
      
      - name: Install dependencies
        working-directory: ./agentguard-ui
        run: npm ci
      
      - name: Run linting
        working-directory: ./agentguard-ui
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./agentguard-ui
        run: npx tsc --noEmit
      
      - name: Build frontend
        working-directory: ./agentguard-ui
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://staging-api.mothership-ai.com

  # Job 4: Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Python Security Check (Bandit)
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  # Job 5: Code Quality
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install quality tools
        run: |
          pip install black flake8 mypy pylint
      
      - name: Check code formatting (Black)
        run: black --check src/ tests/
      
      - name: Run Flake8
        run: flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
      
      - name: Run MyPy type checking
        run: mypy src/ --ignore-missing-imports

  # Job 6: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: agentguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Run integration tests
        run: |
          pytest tests/test_integration_*.py -v
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY_TEST }}
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/agentguard_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test

  # Job 7: Performance Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust
      
      - name: Start API server
        run: |
          uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY_TEST }}
          ENVIRONMENT: test
      
      - name: Run load tests
        run: |
          # Create simple load test
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          
          class AgentGuardUser(HttpUser):
              wait_time = between(1, 3)
              
              @task
              def health_check(self):
                  self.client.get("/health")
              
              @task(3)
              def test_agent(self):
                  self.client.post("/test-agent", json={
                      "agent_output": "Test output",
                      "ground_truth": "Test truth"
                  })
          EOF
          
          locust -f locustfile.py --headless --users 100 --spawn-rate 10 --run-time 60s --host http://localhost:8000

  # Job 8: Build and Push Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            mothershipai/agentguard-api:latest
            mothershipai/agentguard-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./agentguard-ui
          push: true
          tags: |
            mothershipai/agentguard-ui:latest
            mothershipai/agentguard-ui:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 9: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.watcher.mothership-ai.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render (Staging)
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check staging
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging-api.mothership-ai.com/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi

  # Job 10: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://watcher.mothership-ai.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render (Production)
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PRODUCTION }}"
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check production
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://agentguard-api.onrender.com/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful"
          # Add Slack/email notification here
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Production deployment failed - manual rollback required"
          # Add rollback logic here

  # Job 11: Post-Deployment Monitoring
  post-deployment-check:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Run smoke tests
        run: |
          # Test critical endpoints
          curl -f https://agentguard-api.onrender.com/health || exit 1
          curl -f https://agentguard-api.onrender.com/docs || exit 1
          curl -f https://agentguard-ui.onrender.com/ || exit 1
      
      - name: Check system metrics
        run: |
          # Verify all components are healthy
          health=$(curl -s https://agentguard-api.onrender.com/health | jq -r '.status')
          if [ "$health" != "healthy" ]; then
            echo "System health check failed: $health"
            exit 1
          fi

