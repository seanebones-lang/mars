apiVersion: v1
kind: ConfigMap
metadata:
  name: agentguard-postgres-config
  namespace: agentguard
  labels:
    app: agentguard
    component: postgres
data:
  postgresql.conf: |
    # PostgreSQL configuration for AgentGuard
    # October 2025 Enhancement: Production-optimized PostgreSQL configuration
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 100
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_file_mode = 0600
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_lock_waits = on
    log_statement = 'ddl'
    log_temp_files = 0
    
    # Performance
    checkpoint_timeout = 10min
    checkpoint_completion_target = 0.9
    max_wal_size = 4GB
    min_wal_size = 1GB
    
    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    autovacuum_vacuum_scale_factor = 0.2
    autovacuum_analyze_scale_factor = 0.1
    autovacuum_freeze_max_age = 200000000
    autovacuum_multixact_freeze_max_age = 400000000
    autovacuum_vacuum_cost_delay = 20ms
    autovacuum_vacuum_cost_limit = 200
    
    # Replication (for future use)
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    hot_standby = on
    
    # Security
    ssl = off
    password_encryption = scram-sha-256
    
    # Locale
    lc_messages = 'en_US.utf8'
    lc_monetary = 'en_US.utf8'
    lc_numeric = 'en_US.utf8'
    lc_time = 'en_US.utf8'
    default_text_search_config = 'pg_catalog.english'
    
    # Timezone
    timezone = 'UTC'
    
    # Extensions
    shared_preload_libraries = 'pg_stat_statements'
    
    # Statistics
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = pl
    stats_temp_directory = 'pg_stat_tmp'
  
  init.sql: |
    -- AgentGuard Database Initialization
    -- October 2025 Enhancement: Database schema and optimizations
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS agentguard;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    CREATE SCHEMA IF NOT EXISTS analytics;
    
    -- Set default schema
    ALTER DATABASE agentguard SET search_path TO agentguard, public;
    
    -- Create tables for AgentGuard
    CREATE TABLE IF NOT EXISTS agentguard.detection_requests (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        request_id VARCHAR(255) UNIQUE NOT NULL,
        agent_output TEXT NOT NULL,
        ground_truth TEXT,
        conversation_history JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        metadata JSONB DEFAULT '{}'::jsonb
    );
    
    CREATE TABLE IF NOT EXISTS agentguard.detection_results (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        request_id VARCHAR(255) REFERENCES agentguard.detection_requests(request_id),
        hallucination_score DECIMAL(5,4) NOT NULL,
        confidence_interval DECIMAL(5,4)[] NOT NULL,
        claude_score DECIMAL(5,4),
        statistical_score DECIMAL(5,4),
        ensemble_score DECIMAL(5,4),
        processing_time_ms INTEGER NOT NULL,
        judge_type VARCHAR(50) NOT NULL,
        model_version VARCHAR(100),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        details JSONB DEFAULT '{}'::jsonb
    );
    
    CREATE TABLE IF NOT EXISTS agentguard.multilingual_results (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        request_id VARCHAR(255) REFERENCES agentguard.detection_requests(request_id),
        detected_language VARCHAR(10) NOT NULL,
        language_confidence DECIMAL(5,4) NOT NULL,
        span_level_scores JSONB NOT NULL,
        model_used VARCHAR(255) NOT NULL,
        processing_time_ms INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        metadata JSONB DEFAULT '{}'::jsonb
    );
    
    CREATE TABLE IF NOT EXISTS agentguard.agent_pipeline_results (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        request_id VARCHAR(255) REFERENCES agentguard.detection_requests(request_id),
        original_text TEXT NOT NULL,
        corrected_text TEXT NOT NULL,
        correction_applied BOOLEAN NOT NULL,
        pipeline_confidence DECIMAL(5,4) NOT NULL,
        agent_outputs JSONB NOT NULL,
        improvement_metrics JSONB NOT NULL,
        total_processing_time_ms INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    CREATE TABLE IF NOT EXISTS monitoring.performance_metrics (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        metric_name VARCHAR(255) NOT NULL,
        metric_value DECIMAL(10,4) NOT NULL,
        metric_type VARCHAR(50) NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        labels JSONB DEFAULT '{}'::jsonb
    );
    
    CREATE TABLE IF NOT EXISTS analytics.usage_stats (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        endpoint VARCHAR(255) NOT NULL,
        method VARCHAR(10) NOT NULL,
        status_code INTEGER NOT NULL,
        response_time_ms INTEGER NOT NULL,
        user_agent TEXT,
        ip_address INET,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        metadata JSONB DEFAULT '{}'::jsonb
    );
    
    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_detection_requests_created_at ON agentguard.detection_requests(created_at);
    CREATE INDEX IF NOT EXISTS idx_detection_requests_request_id ON agentguard.detection_requests(request_id);
    CREATE INDEX IF NOT EXISTS idx_detection_results_request_id ON agentguard.detection_results(request_id);
    CREATE INDEX IF NOT EXISTS idx_detection_results_created_at ON agentguard.detection_results(created_at);
    CREATE INDEX IF NOT EXISTS idx_detection_results_hallucination_score ON agentguard.detection_results(hallucination_score);
    CREATE INDEX IF NOT EXISTS idx_multilingual_results_request_id ON agentguard.multilingual_results(request_id);
    CREATE INDEX IF NOT EXISTS idx_multilingual_results_language ON agentguard.multilingual_results(detected_language);
    CREATE INDEX IF NOT EXISTS idx_agent_pipeline_results_request_id ON agentguard.agent_pipeline_results(request_id);
    CREATE INDEX IF NOT EXISTS idx_performance_metrics_timestamp ON monitoring.performance_metrics(timestamp);
    CREATE INDEX IF NOT EXISTS idx_performance_metrics_name ON monitoring.performance_metrics(metric_name);
    CREATE INDEX IF NOT EXISTS idx_usage_stats_timestamp ON analytics.usage_stats(timestamp);
    CREATE INDEX IF NOT EXISTS idx_usage_stats_endpoint ON analytics.usage_stats(endpoint);
    
    -- Create GIN indexes for JSONB columns
    CREATE INDEX IF NOT EXISTS idx_detection_requests_metadata_gin ON agentguard.detection_requests USING GIN(metadata);
    CREATE INDEX IF NOT EXISTS idx_detection_results_details_gin ON agentguard.detection_results USING GIN(details);
    CREATE INDEX IF NOT EXISTS idx_multilingual_results_metadata_gin ON agentguard.multilingual_results USING GIN(metadata);
    CREATE INDEX IF NOT EXISTS idx_performance_metrics_labels_gin ON monitoring.performance_metrics USING GIN(labels);
    CREATE INDEX IF NOT EXISTS idx_usage_stats_metadata_gin ON analytics.usage_stats USING GIN(metadata);
    
    -- Create functions for automatic timestamp updates
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Create triggers for automatic timestamp updates
    CREATE TRIGGER update_detection_requests_updated_at 
        BEFORE UPDATE ON agentguard.detection_requests 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    
    -- Create views for analytics
    CREATE OR REPLACE VIEW analytics.daily_detection_stats AS
    SELECT 
        DATE(dr.created_at) as date,
        COUNT(*) as total_requests,
        AVG(res.hallucination_score) as avg_hallucination_score,
        AVG(res.processing_time_ms) as avg_processing_time_ms,
        COUNT(CASE WHEN res.hallucination_score > 0.7 THEN 1 END) as high_risk_detections
    FROM agentguard.detection_requests dr
    JOIN agentguard.detection_results res ON dr.request_id = res.request_id
    GROUP BY DATE(dr.created_at)
    ORDER BY date DESC;
    
    CREATE OR REPLACE VIEW analytics.language_distribution AS
    SELECT 
        detected_language,
        COUNT(*) as request_count,
        AVG(language_confidence) as avg_confidence,
        AVG(processing_time_ms) as avg_processing_time_ms
    FROM agentguard.multilingual_results
    GROUP BY detected_language
    ORDER BY request_count DESC;
    
    -- Grant permissions
    GRANT USAGE ON SCHEMA agentguard TO agentguard;
    GRANT USAGE ON SCHEMA monitoring TO agentguard;
    GRANT USAGE ON SCHEMA analytics TO agentguard;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA agentguard TO agentguard;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA monitoring TO agentguard;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA analytics TO agentguard;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA agentguard TO agentguard;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA monitoring TO agentguard;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA analytics TO agentguard;
