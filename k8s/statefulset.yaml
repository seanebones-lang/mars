apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: agentguard-postgres
  namespace: agentguard
  labels:
    app: agentguard
    component: postgres
spec:
  serviceName: agentguard-postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: agentguard
      component: postgres
  template:
    metadata:
      labels:
        app: agentguard
        component: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "agentguard"
        - name: POSTGRES_USER
          value: "agentguard"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "agentguard" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "agentguard" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: agentguard-postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 50Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: agentguard-redis
  namespace: agentguard
  labels:
    app: agentguard
    component: redis
spec:
  serviceName: agentguard-redis
  replicas: 1
  selector:
    matchLabels:
      app: agentguard
      component: redis
  template:
    metadata:
      labels:
        app: agentguard
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: agentguard-redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: agentguard-mlflow
  namespace: agentguard
  labels:
    app: agentguard
    component: mlflow
spec:
  serviceName: agentguard-mlflow
  replicas: 1
  selector:
    matchLabels:
      app: agentguard
      component: mlflow
  template:
    metadata:
      labels:
        app: agentguard
        component: mlflow
    spec:
      containers:
      - name: mlflow
        image: python:3.11-slim
        ports:
        - containerPort: 5000
          name: http
        command:
        - /bin/bash
        - -c
        - |
          pip install mlflow psycopg2-binary boto3
          mlflow server \
            --backend-store-uri postgresql://agentguard:${POSTGRES_PASSWORD}@agentguard-postgres:5432/mlflow \
            --default-artifact-root /mlflow/artifacts \
            --host 0.0.0.0 \
            --port 5000
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        volumeMounts:
        - name: mlflow-artifacts
          mountPath: /mlflow/artifacts
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: mlflow-artifacts
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      resources:
        requests:
          storage: 20Gi
