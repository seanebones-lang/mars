apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentguard-api
  namespace: agentguard
  labels:
    app: agentguard
    component: api
    version: "2025.10"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: agentguard
      component: api
  template:
    metadata:
      labels:
        app: agentguard
        component: api
        version: "2025.10"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: agentguard-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: agentguard-api
        image: agentguard/api:2025.10
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        # Configuration from ConfigMap
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: APP_NAME
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: APP_VERSION
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: LOG_LEVEL
        - name: API_HOST
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: API_HOST
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: API_PORT
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: WORKERS
        - name: STATISTICAL_MODEL
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: STATISTICAL_MODEL
        - name: CLAUDE_MODEL
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: CLAUDE_MODEL
        - name: ENABLE_GROUNDING
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: ENABLE_GROUNDING
        - name: ENABLE_MULTILINGUAL
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: ENABLE_MULTILINGUAL
        - name: ENABLE_AGENT_PIPELINE
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: ENABLE_AGENT_PIPELINE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: REDIS_URL
        - name: MLFLOW_TRACKING_URI
          valueFrom:
            configMapKeyRef:
              name: agentguard-config
              key: MLFLOW_TRACKING_URI
        
        # Secrets
        - name: CLAUDE_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: CLAUDE_API_KEY
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: JWT_SECRET_KEY
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: ENCRYPTION_KEY
        - name: WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: agentguard-secrets
              key: WEBHOOK_SECRET
        
        # Kubernetes-specific environment variables
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        volumeMounts:
        - name: model-cache
          mountPath: /app/models
        - name: temp-storage
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: agentguard-model-cache
      - name: temp-storage
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/arch: amd64
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - agentguard
                - key: component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "agentguard.io/dedicated"
        operator: "Equal"
        value: "api"
        effect: "NoSchedule"
      
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentguard-nginx
  namespace: agentguard
  labels:
    app: agentguard
    component: nginx
    version: "2025.10"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: agentguard
      component: nginx
  template:
    metadata:
      labels:
        app: agentguard
        component: nginx
        version: "2025.10"
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: nginx-config
        configMap:
          name: agentguard-nginx-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
