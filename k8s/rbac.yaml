apiVersion: v1
kind: ServiceAccount
metadata:
  name: agentguard-service-account
  namespace: agentguard
  labels:
    app: agentguard
    component: rbac
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agentguard-role
  namespace: agentguard
  labels:
    app: agentguard
    component: rbac
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading Pods for health checks and metrics
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
# Allow reading Services for service discovery
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
# Allow reading Endpoints for load balancing
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
# Allow creating Events for logging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
# Allow reading PersistentVolumeClaims
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agentguard-role-binding
  namespace: agentguard
  labels:
    app: agentguard
    component: rbac
subjects:
- kind: ServiceAccount
  name: agentguard-service-account
  namespace: agentguard
roleRef:
  kind: Role
  name: agentguard-role
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole for cross-namespace operations (if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agentguard-cluster-role
  labels:
    app: agentguard
    component: rbac
rules:
# Allow reading Nodes for resource monitoring
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
# Allow reading Namespaces for multi-tenant operations
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
# Allow reading custom metrics for HPA
- apiGroups: ["metrics.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list"]
- apiGroups: ["custom.metrics.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list"]
# Allow reading external metrics for HPA
- apiGroups: ["external.metrics.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agentguard-cluster-role-binding
  labels:
    app: agentguard
    component: rbac
subjects:
- kind: ServiceAccount
  name: agentguard-service-account
  namespace: agentguard
roleRef:
  kind: ClusterRole
  name: agentguard-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Policy (if using PSP)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: agentguard-psp
  labels:
    app: agentguard
    component: rbac
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true
---
# Role for Pod Security Policy
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agentguard-psp-role
  namespace: agentguard
  labels:
    app: agentguard
    component: rbac
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - agentguard-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agentguard-psp-role-binding
  namespace: agentguard
  labels:
    app: agentguard
    component: rbac
roleRef:
  kind: Role
  name: agentguard-psp-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: agentguard-service-account
  namespace: agentguard
